import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/authOptions'
import pool from '@/lib/db'
import type { Session } from 'next-auth'

export const runtime = 'nodejs'

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ id: string; categoryId: string }> }
) {
  try {
    console.log('üöÄ GET /api/stores/[id]/categories/[categoryId]/items iniciado')
    
    const session = await getServerSession(authOptions) as Session | null
    if (!session?.user?.email) {
      console.log('‚ùå Usu√°rio n√£o autenticado')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const resolvedParams = await params
    console.log('üìç Params resolvidos:', resolvedParams)

    // Verificar se a loja pertence ao usu√°rio
    const storeResult = await pool.query(
      'SELECT id FROM stores WHERE id = $1 AND userid = $2',
      [resolvedParams.id, session.user.id]
    )

    if (storeResult.rows.length === 0) {
      return NextResponse.json({ error: 'Store not found' }, { status: 404 })
    }

    // Verificar se a categoria existe
    const categoryResult = await pool.query(
      'SELECT id FROM categories WHERE id = $1 AND storeid = $2',
      [resolvedParams.categoryId, resolvedParams.id]
    )

    if (categoryResult.rows.length === 0) {
      return NextResponse.json({ error: 'Category not found' }, { status: 404 })
    }

    // Buscar itens da categoria - usando created_at para ordena√ß√£o
    const itemsResult = await pool.query(
      'SELECT * FROM items WHERE categoryid = $1 ORDER BY created_at ASC',
      [resolvedParams.categoryId]
    )
    
    const items = itemsResult.rows

    return NextResponse.json(items)
  } catch (error) {
    console.error('üí• Error fetching items:', error)
    return NextResponse.json({ error: 'INTERNAL_ERROR', detail: error instanceof Error ? error.message : 'Unknown error' }, { status: 500 });
  }
}

export async function POST(
  request: NextRequest,
  { params }: { params: Promise<{ id: string; categoryId: string }> }
) {
  try {
    console.log('üöÄ POST /api/stores/[id]/categories/[categoryId]/items iniciado')
    
    // Teste b√°sico primeiro
    console.log('üîç Testando conex√£o b√°sica...')
    
    const resolvedParams = await params
    console.log('üìç Params resolvidos:', resolvedParams)
    
    // Teste de conex√£o do banco
    const testResult = await pool.query('SELECT NOW() as current_time')
    console.log('‚úÖ Conex√£o com banco OK:', testResult.rows[0])
    
    const session = await getServerSession(authOptions) as Session | null
    console.log('üë§ Sess√£o encontrada:', !!session)
    console.log('üë§ User ID:', session?.user?.id)
    console.log('üë§ User Email:', session?.user?.email)
    
    if (!session?.user?.email) {
      console.log('‚ùå Usu√°rio n√£o autenticado')
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Teste simples de query
    console.log('üîç Testando query de store...')
    const storeResult = await pool.query(
      'SELECT id, name FROM stores WHERE id = $1',
      [resolvedParams.id]
    )
    console.log('üè™ Store encontrada:', storeResult.rows)

    if (storeResult.rows.length === 0) {
      console.log('‚ùå Loja n√£o encontrada')
      return NextResponse.json({ error: 'Store not found' }, { status: 404 })
    }

    // Verificar se a loja pertence ao usu√°rio
    console.log('üîç Verificando propriedade da loja...')
    const ownershipResult = await pool.query(
      'SELECT id FROM stores WHERE id = $1 AND userid = $2',
      [resolvedParams.id, session.user.id]
    )
    console.log('üë§ Ownership result:', ownershipResult.rows)

    if (ownershipResult.rows.length === 0) {
      console.log('‚ùå Loja n√£o pertence ao usu√°rio')
      return NextResponse.json({ error: 'Store not found or access denied' }, { status: 404 })
    }

    // Verificar se a categoria existe
    console.log('üîç Verificando categoria...')
    const categoryResult = await pool.query(
      'SELECT id, name FROM categories WHERE id = $1 AND storeid = $2',
      [resolvedParams.categoryId, resolvedParams.id]
    )
    console.log('üìÅ Category result:', categoryResult.rows)

    if (categoryResult.rows.length === 0) {
      console.log('‚ùå Categoria n√£o encontrada')
      return NextResponse.json({ error: 'Category not found' }, { status: 404 })
    }

    const body = await request.json()
    console.log('üìã Payload recebido:', body)
    const { name, description, price, image, isactive, isarchived } = body

    if (!name?.trim()) {
      console.log('‚ùå Nome do item n√£o fornecido')
      return NextResponse.json(
        { error: 'Item name is required' },
        { status: 400 }
      )
    }

    // Primeiro, vamos descobrir a estrutura real da tabela
    console.log('üîç Verificando estrutura da tabela items...')
    const tableStructure = await pool.query(
      `SELECT column_name, data_type FROM information_schema.columns 
       WHERE table_name = 'items' AND table_schema = 'public' 
       ORDER BY ordinal_position`
    )
    console.log('üìä Colunas da tabela items:', tableStructure.rows)

    // Obter o pr√≥ximo n√∫mero de posi√ß√£o usando uma coluna que existe
    console.log('üîç Obtendo pr√≥xima posi√ß√£o...')
    
    // Primeiro vamos tentar com id (deve sempre existir)
    const lastItemResult = await pool.query(
      'SELECT id FROM items WHERE categoryid = $1 ORDER BY id DESC LIMIT 1',
      [resolvedParams.categoryId]
    )
    console.log('üìä Last item result:', lastItemResult.rows)

    // Para posi√ß√£o, vamos usar um valor simples baseado no timestamp
    const nextPosition = Date.now() % 1000000 // N√∫mero √∫nico baseado em timestamp
    console.log('üéØ Next position (timestamp-based):', nextPosition)

    // Preparar dados para inser√ß√£o
    const insertData = [
      name.trim(),
      description?.trim() || null,
      price ? Math.round(parseFloat(String(price)) * 100) : 0,
      image?.trim() || null,
      parseInt(resolvedParams.categoryId),
      nextPosition,
      true,
      parseInt(resolvedParams.id),
    ]
    console.log('üìù Dados para inser√ß√£o:', insertData)

    // Criar o item - vamos usar apenas colunas que sabemos que existem
    console.log('üíæ Inserindo item no banco...')
    
    // Vamos tentar inser√ß√£o b√°sica primeiro
    const itemResult = await pool.query(
      `INSERT INTO items (
        name, description, price_cents, image, categoryid, 
        isactive, isarchived, storeid, created_at, updated_at
      ) VALUES (
        $1, $2, $3, $4, $5, $6, $7, $8, NOW(), NOW()
      )
      RETURNING *`,
      [
        name.trim(),
        description?.trim() || null,
        price ? Math.round(parseFloat(String(price)) * 100) : 0,
        image?.trim() || null,
        parseInt(resolvedParams.categoryId),
        isactive !== undefined ? isactive : true, // Usa o valor passado ou padr√£o true
        isarchived !== undefined ? isarchived : false, // Usa o valor passado ou padr√£o false
        parseInt(resolvedParams.id),
      ]
    )
    console.log('‚úÖ Item inserido com sucesso:', itemResult.rows[0])
    
    const item = itemResult.rows[0]

    return NextResponse.json(item, { status: 201 })
  } catch (error) {
    console.error('üí• ERRO COMPLETO:', error)
    console.error('üí• Stack trace:', error instanceof Error ? error.stack : 'No stack')
    console.error('üí• Mensagem:', error instanceof Error ? error.message : 'Unknown error')
    
    return NextResponse.json({ 
      error: 'INTERNAL_ERROR', 
      detail: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined 
    }, { status: 500 });
  }
}
